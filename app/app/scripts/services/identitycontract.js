'use strict';

/**
 * @ngdoc service
 * @name angularApp.IdentityContract
 * @description
 * # IdentityContract
 * Service in the angularApp.
 */
angular.module('angularApp')
  .service('IdentityContract', function ($log, pgp, CryptoWrapper, Web3, Notification) {

    var self = this;

    self.contractAbi = [{'constant':false,'inputs':[],'name':'getRequesteeCount','outputs':[{'name':'','type':'uint256'}],'type':'function'},{'constant':false,'inputs':[],'name':'kill','outputs':[],'type':'function'},{'constant':false,'inputs':[{'name':'assertionType','type':'uint256'},{'name':'key','type':'string'},{'name':'value','type':'string'}],'name':'assert','outputs':[],'type':'function'},{'constant':false,'inputs':[{'name':'publicKey','type':'string'},{'name':'requestedAssertions','type':'uint256[]'}],'name':'request','outputs':[],'type':'function'},{'constant':false,'inputs':[{'name':'requestee','type':'address'}],'name':'getRequest','outputs':[{'name':'publicKey','type':'string'},{'name':'numberOfAssertions','type':'uint256'}],'type':'function'},{'constant':false,'inputs':[{'name':'requestee','type':'address'}],'name':'grant','outputs':[],'type':'function'},{'constant':false,'inputs':[{'name':'index','type':'uint256'}],'name':'getRequestee','outputs':[{'name':'','type':'address'}],'type':'function'},{'constant':false,'inputs':[{'name':'requestee','type':'address'},{'name':'index','type':'uint256'}],'name':'getRequestAssertion','outputs':[{'name':'assertionType','type':'uint256'}],'type':'function'},{'constant':false,'inputs':[{'name':'assertionType','type':'uint256'}],'name':'get','outputs':[{'name':'key','type':'string'},{'name':'value','type':'string'}],'type':'function'},{'inputs':[],'type':'constructor'}];

    self.contractBytes = '60606040525b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908302179055505b610eb28061003f6000396000f360606040523615610095576000357c010000000000000000000000000000000000000000000000000000000090048063201e2d3b146100a257806341c0e1b5146100c557806348e724dd146100d457806361f57cd91461017a57806363c1dff71461021457806370284d191461029f5780638a139729146102b75780639471d30b146102f95780639507d39a1461032e57610095565b6100a05b610002565b565b005b6100af6004805050610cf4565b6040518082815260200191505060405180910390f35b6100d26004805050610411565b005b6101786004808035906020019091908035906020019082018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050909091908035906020019082018035906020019191908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509090919050506104a5565b005b6102126004808035906020019082018035906020019191908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509090919080359060200190820180359060200191919080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050909091905050610843565b005b61022a6004808035906020019091905050610d53565b60405180806020018381526020018281038252848181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f1680156102905780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b6102b56004808035906020019091905050610a57565b005b6102cd6004808035906020019091905050610d09565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103186004808035906020019091908035906020019091905050610e56565b6040518082815260200191505060405180910390f35b610344600480803590602001909190505061069d565b6040518080602001806020018381038352858181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f1680156103a85780820380516001836020036101000a031916815260200191505b508381038252848181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f1680156104015780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156104a257600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5b565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156106975760406040519081016040528083815260200182815260200150600160005060008581526020019081526020016000206000506000820151816000016000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061058257805160ff19168380011785556105b3565b828001600101855582156105b3579182015b828111156105b2578251826000505591602001919060010190610594565b5b5090506105de91906105c0565b808211156105da57600081815060009055506001016105c0565b5090565b50506020820151816001016000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061063557805160ff1916838001178555610666565b82800160010185558215610666579182015b82811115610665578251826000505591602001919060010190610647565b5b5090506106919190610673565b8082111561068d5760008181506000905550600101610673565b5090565b50509050505b5b505050565b60206040519081016040528060008152602001506020604051908101604052806000815260200150600160005060008481526020019081526020016000206000506000016000508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107785780601f1061074d57610100808354040283529160200191610778565b820191906000526020600020905b81548152906001019060200180831161075b57829003601f168201915b505050505091508150600160005060008481526020019081526020016000206000506001016000508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108345780601f1061080957610100808354040283529160200191610834565b820191906000526020600020905b81548152906001019060200180831161081757829003601f168201915b5050505050905080505b915091565b60406040519081016040528083815260200182815260200150600260005060003373ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000506000820151816000016000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106108e057805160ff1916838001178555610911565b82800160010185558215610911579182015b828111156109105782518260005055916020019190600101906108f2565b5b50905061093c919061091e565b80821115610938576000818150600090555060010161091e565b5090565b50506020820151816001016000509080519060200190828054828255906000526020600020908101928215610991579160200282015b82811115610990578251826000505591602001919060010190610972565b5b5090506109bc919061099e565b808211156109b8576000818150600090555060010161099e565b5090565b505090505060036000508054806001018281815481835581811511610a1357818360005260206000209182019101610a1291906109f4565b80821115610a0e57600081815060009055506001016109f4565b5090565b5b5050509190906000526020600020900160005b33909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690830217905550505b5050565b6000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610cef57600260005060008373ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060008201600050805460018160011615610100020316600290046000825580601f10610b095750610b46565b601f016020900490600052602060002090810190610b459190610b27565b80821115610b415760008181506000905550600101610b27565b5090565b5b506001820160005080546000825590600052602060002090810190610b899190610b6b565b80821115610b855760008181506000905550600101610b6b565b5090565b5b505050600090505b6003600050805490508160ff161015610cee578173ffffffffffffffffffffffffffffffffffffffff16600360005082815481101561000257906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610ce057600260005060008260ff168152602001908152602001600020600060008201600050805460018160011615610100020316600290046000825580601f10610c5b5750610c98565b601f016020900490600052602060002090810190610c979190610c79565b80821115610c935760008181506000905550600101610c79565b5090565b5b506001820160005080546000825590600052602060002090810190610cdb9190610cbd565b80821115610cd75760008181506000905550600101610cbd565b5090565b5b5050505b5b8080600101915050610b92565b5b5b5050565b60006003600050805490509050610d06565b90565b6000600360005082815481101561000257906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610d4e565b919050565b602060405190810160405280600081526020015060006000600260005060008573ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000509050806000016000508054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e375780601f10610e0c57610100808354040283529160200191610e37565b820191906000526020600020905b815481529060010190602001808311610e1a57829003601f168201915b5050505050925082508060010160005080549050915081505b50915091565b6000600260005060008473ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060010160005082815481101561000257906000526020600020900160005b5054905080505b9291505056';

    self.assertionTypes = [
      {id:1, label: 'Name'},
      {id:2, label: 'Date of birth'}
    ];

    self.assertionById = function(id){
      var filter = function(element){
        return element.id.toString() === id.toString();
      };
      return self.assertionTypes.find(filter);
    };

    self.createIdentityClient = function(identity, address){
      return Web3.getContract(identity, self.contractAbi, address);
    };

    // Contract creation / Deletion
    self.createContract = function(identity, callback){
        $log.info("Creating contract for ", identity);
        Notification.primary("Creating contract");
        $log.info("Using from address", identity.ethAddress());
        Notification.info("Using from address: " + identity.ethAddress());
        var web3 = Web3.createSignedWeb3(identity);
        var identityContract = web3.eth.contract(self.contractAbi);
        identityContract.new({
          from: identity.ethAddress(),
          data: self.contractBytes,
          gas: 3000000,
          gasPrice: Web3.gasPrice
         }, callback);
    };

    self.deleteContract = function(identity, callback){
      self.createIdentityClient(identity, identity.contractAddress).kill({gas: 3000000, gasPrice: Web3.gasPrice}, callback);
    };

    // Assertions
    self.assert = function(identity, assertionType, assertionValue) {
      // Generate unique enryption key for this assertion
      var sessionKey = CryptoWrapper.randomKey();
      Notification.info('Generating Session Key: '+sessionKey);
      // Encrypt assertion with generated random key
      var encryptedAssertion = CryptoWrapper.encryptValue(assertionValue, sessionKey);
      Notification.info('Encrypting Assertion: '+encryptedAssertion);
      // Encrypt session key to self
      Notification.info('Encrypting Session Key');
      var callback = function(e){
        if(e){
          Notification.fail("Assertion failed");
        } else {
          Notification.success("Asserted value");
        }
      };
      pgp.encryptMessage(identity.pgp, sessionKey).then(function (encryptedSessionKey){
          $log.info('Storing assertionType:"'+assertionType+'"" with key "'+sessionKey+'"" and value "'+assertionValue+'"" to contract at : '+identity.contractAddress);
          return self.createIdentityClient(identity, identity.contractAddress).assert( assertionType, encryptedSessionKey, encryptedAssertion, {gas: 3000000, gasPrice: Web3.gasPrice}, callback);
      });
    };

    // Address is passed in since it can differ from the identity address
    self.readAssertion = function(identity, identityAddress, assertionType, callback){
      var internalCallback = function(e,result){
        if(e){
          $log.warn(e);
        } else if (result.lastIndexOf("") !== -1 ){
          $log.warn("Got one or more empty responses from contract, read failed");
        } else {
          $log.debug(result);
          Notification.info("Decrypting Session Key");
          pgp.decryptMessage(identity.pgp, pgp.message.readArmored(result[0])).then(function(decryptedSessionKey){
             var decryptedAssertion = CryptoWrapper.decryptStringValue(result[1], decryptedSessionKey);
             Notification.info("Decrypting Assertion");
             callback(decryptedAssertion);
          });
        }
      };
      self.createIdentityClient(identity, identityAddress).get.call(assertionType, internalCallback);
    };

    // Requests
    /**
    * to test :
    * identity = angular.element(document.body).injector().get('Identity').get("test")
    *
    **/
    self.request = function(requesteeIdentity, targetIdentity, assertionTypes, callback){
      self.createIdentityClient(requesteeIdentity, targetIdentity.contractAddress)
        .request(requesteeIdentity.pgpPublicKey(), assertionTypes,{gas: 3000000, gasPrice: Web3.gasPrice}, callback);
    };
    /**
    * To test :
    var identity = angular.element(document.body).injector().get('Identity').get("test")
    var contract = angular.element(document.body).injector().get('IdentityContract')
    */
    self.requests = function(targetIdentity){
      var requests = [];
      var contract = self.createIdentityClient(targetIdentity, targetIdentity.contractAddress);
      var numberOfRequestees = contract.getRequesteeCount.call().toNumber();
      for (var i=0; i < numberOfRequestees; i++){
          var request = {};
          request.requestee = contract.getRequestee.call(i);
          var requestDetails = contract.getRequest.call(request.requestee);
          request.publicKey = requestDetails[0];
          var numberOfAssertions = requestDetails[1];
          request.assertions = [];
          for(var j=0; j < numberOfAssertions; j++){
            request.assertions.push(contract.getRequestAssertion.call(request.requestee, j).toNumber());
          }
          requests.push(request);
      }
      return requests;
    };

  });
