'use strict';

/**
 * @ngdoc service
 * @name angularApp.Ethereum
 * @description
 * # Ethereum
 * Service in the angularApp.
 */

var Web3 = require('web3');

angular.module('angularApp')
  .service('Ethereum', function ($log, Config) {
    var self = this;
    var GASPRICE = 200000;

    self.contractAbi = [{'constant':false,'inputs':[{'name':'message','type':'string'}],'name':'ping','outputs':[{'name':'result','type':'string'}],'type':'function'},{'constant':false,'inputs':[],'name':'kill','outputs':[],'type':'function'},{'constant':false,'inputs':[{'name':'assertionType','type':'uint256'},{'name':'key','type':'string'},{'name':'value','type':'string'}],'name':'assert','outputs':[],'type':'function'},{'constant':false,'inputs':[{'name':'assertionType','type':'uint256'}],'name':'attest','outputs':[],'type':'function'},{'constant':false,'inputs':[{'name':'assertionType','type':'uint256'}],'name':'get','outputs':[{'name':'key','type':'string'},{'name':'value','type':'string'}],'type':'function'},{'constant':false,'inputs':[{'name':'assertionType','type':'uint256'},{'name':'grantee','type':'address'},{'name':'key','type':'string'}],'name':'grant','outputs':[],'type':'function'},{'constant':false,'inputs':[],'name':'mortal','outputs':[],'type':'function'}];

    self.contractBytes = '606060405261092c806100126000396000f36060604052361561007f576000357c0100000000000000000000000000000000000000000000000000000000900480633adb191b1461008157806341c0e1b51461014357806348e724dd146101525780634af6ffc2146101f85780639507d39a146102105780639604a663146102f3578063f1eae25c1461035b5761007f565b005b6100d56004808035906020019082018035906020019191908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509090919050506105d2565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f1680156101355780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101506004805050610398565b005b6101f66004808035906020019091908035906020019082018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050909091908035906020019082018035906020019191908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509090919050506105f1565b005b61020e6004808035906020019091905050610792565b005b610226600480803590602001909190505061042c565b6040518080602001806020018381038352858181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f16801561028a5780820380516001836020036101000a031916815260200191505b508381038252848181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f1680156102e35780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b6103596004808035906020019091908035906020019091908035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505090909190505061083b565b005b610368600480505061036a565b005b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908302179055505b565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561042957600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5b565b60206040519081016040528060008152602001506020604051908101604052806000815260200150600160005060008481526020019081526020016000206000506000016000508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105075780601f106104dc57610100808354040283529160200191610507565b820191906000526020600020905b8154815290600101906020018083116104ea57829003601f168201915b505050505091508150600160005060008481526020019081526020016000206000506001016000508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105c35780601f10610598576101008083540402835291602001916105c3565b820191906000526020600020905b8154815290600101906020018083116105a657829003601f168201915b5050505050905080505b915091565b602060405190810160405280600081526020015081905080505b919050565b60406040519081016040528083815260200182815260200150600160005060008581526020019081526020016000206000506000820151816000016000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061067857805160ff19168380011785556106a9565b828001600101855582156106a9579182015b828111156106a857825182600050559160200191906001019061068a565b5b5090506106d491906106b6565b808211156106d057600081815060009055506001016106b6565b5090565b50506020820151816001016000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061072b57805160ff191683800117855561075c565b8280016001018555821561075c579182015b8281111561075b57825182600050559160200191906001019061073d565b5b5090506107879190610769565b808211156107835760008181506000905550600101610769565b5090565b50509050505b505050565b6002600050600082815260200190815260200160002060005080548060010182818154818355818115116107f8578183600052602060002091820191016107f791906107d9565b808211156107f357600081815060009055506001016107d9565b5090565b5b5050509190906000526020600020900160005b33909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690830217905550505b50565b806003600050600085815260200190815260200160002060005060008473ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106108c857805160ff19168380011785556108f9565b828001600101855582156108f9579182015b828111156108f85782518260005055916020019190600101906108da565b5b5090506109249190610906565b808211156109205760008181506000905550600101610906565b5090565b50505b50505056';

    self.createWeb3 = function() {
      var web3 = new Web3();
      web3.setProvider(new web3.providers.HttpProvider('http://localhost:8545'));
      return web3;
    };

    self.createSignedWeb3 = function(keyStore){
      var web3 = self.createWeb3();
      var provider = new window.HookedWeb3Provider({
          host: Config.gethEndpoint,
          transaction_signer: keyStore});
      web3.setProvider(provider);
      web3.eth.defaultAccount = keyStore.getAddresses()[0];
      return web3;
    };

    self.createIdentityClient = function(keyStore, address){
      var web3 = self.createSignedWeb3(keyStore);
      var identityContract = web3.eth.contract(self.contractAbi);
      return identityContract.at(address);
    };

    self.getBalance = function(address) {
        return self.createWeb3().eth.getBalance(address);
    };

    self.createContract = function(keyStore, address, callback){
        var web3 = self.createSignedWeb3(keyStore, address);
        var identityContract = web3.eth.contract(self.contractAbi);
        identityContract.new({
         from: keyStore.getAddresses()[0],
         data: self.contractBytes,
         gas: 3000000,
         gasPrice: GASPRICE
        }, callback);
    };

    self.deleteContract = function(keyStore, address, callback){
      self.createIdentityClient(keyStore, address).kill({gas: 3000000, gasPrice: GASPRICE}, callback);
    };

    /**
    * This maps to the contract on ehtereum, typically wrapped behind the identity asser which does more encryption.
    */
    self.assert = function(keyStore, address, assertionType, assertionKey, assertionValue){
      $log.info('Storing assertionType:"'+assertionType+'"" with key "'+assertionKey+'"" and value "'+assertionValue+'"" to contract at : '+address);
      self.createIdentityClient(keyStore, address).assert( assertionType, assertionKey, assertionValue, {gas: 3000000, gasPrice: GASPRICE}, function(e,res){
        if (e) { $log.info(e); }
        if (res) { $log.info(res); }
      });
    };

    self.get = function(keyStore, address, assertionType){
      $log.info('Querying '+assertionType+' on contract at '+address);
      var res = self.createIdentityClient(keyStore, address).get.call(assertionType);
      $log.info(res);
    };

    $log.info(this);
  });
