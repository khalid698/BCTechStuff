'use strict';

/**
 * @ngdoc service
 * @name angularApp.Ethereum
 * @description
 * # Ethereum
 * Service in the angularApp.
 */

angular.module('angularApp')
  .service('Ethereum', function ($log, Config, Web3) {
    var self = this;
    var GASPRICE = 200000;

    self.contractAbi = [{'constant':false,'inputs':[],'name':'kill','outputs':[],'type':'function'},{'constant':false,'inputs':[{'name':'assertionType','type':'uint256'},{'name':'key','type':'string'},{'name':'value','type':'string'}],'name':'assert','outputs':[],'type':'function'},{'constant':false,'inputs':[{'name':'publicKey','type':'string'},{'name':'requestedAssertions','type':'uint256[]'}],'name':'request','outputs':[],'type':'function'},{'constant':false,'inputs':[{'name':'assertionType','type':'uint256'}],'name':'get','outputs':[{'name':'key','type':'string'},{'name':'value','type':'string'}],'type':'function'},{'inputs':[],'type':'constructor'},{'anonymous':false,'inputs':[{'indexed':false,'name':'requestee','type':'address'},{'indexed':false,'name':'publicKey','type':'string'},{'indexed':false,'name':'assertionTypes','type':'uint256[]'}],'name':'DataRequested','type':'event'}];

    self.contractBytes = '60606040525b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908302179055505b6107bd8061003f6000396000f36060604052361561005e576000357c01000000000000000000000000000000000000000000000000000000009004806341c0e1b51461006b57806348e724dd1461007a57806361f57cd9146101205780639507d39a146101ba5761005e565b6100695b610002565b565b005b610078600480505061038b565b005b61011e6004808035906020019091908035906020019082018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050909091908035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505090909190505061041f565b005b6101b86004808035906020019082018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050909091908035906020019082018035906020019191908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505090909190505061029d565b005b6101d06004808035906020019091905050610617565b6040518080602001806020018381038352858181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f1680156102345780820380516001836020036101000a031916815260200191505b508381038252848181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f16801561028d5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b7f131898d7cff6f49c19cbb3139c3fca1e54ee513f9daf1ccbdc7788b61642a032338383604051808473ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018381038352858181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f1680156103415780820380516001836020036101000a031916815260200191505b508381038252848181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050019550505050505060405180910390a15b5050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561041c57600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5b565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156106115760406040519081016040528083815260200182815260200150600160005060008581526020019081526020016000206000506000820151816000016000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106104fc57805160ff191683800117855561052d565b8280016001018555821561052d579182015b8281111561052c57825182600050559160200191906001019061050e565b5b509050610558919061053a565b80821115610554576000818150600090555060010161053a565b5090565b50506020820151816001016000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106105af57805160ff19168380011785556105e0565b828001600101855582156105e0579182015b828111156105df5782518260005055916020019190600101906105c1565b5b50905061060b91906105ed565b8082111561060757600081815060009055506001016105ed565b5090565b50509050505b5b505050565b60206040519081016040528060008152602001506020604051908101604052806000815260200150600160005060008481526020019081526020016000206000506000016000508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106f25780601f106106c7576101008083540402835291602001916106f2565b820191906000526020600020905b8154815290600101906020018083116106d557829003601f168201915b505050505091508150600160005060008481526020019081526020016000206000506001016000508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107ae5780601f10610783576101008083540402835291602001916107ae565b820191906000526020600020905b81548152906001019060200180831161079157829003601f168201915b5050505050905080505b91509156';

    self.createIdentityClient =  function(keyStore, address){ Web3.createContract(keyStore, self.contractAbi, address); } ;

    self.getBalance = function(address) {
        return Web3.createWeb3().eth.getBalance(address);
    };

    self.createContract = function(keyStore, address, callback){
        var web3 = Web3.createSignedWeb3(keyStore, address);
        var identityContract = web3.eth.contract(self.contractAbi);
        identityContract.new({
         from: keyStore.getAddresses()[0],
         data: self.contractBytes,
         gas: 3000000,
         gasPrice: GASPRICE
        }, callback);
    };

    self.deleteContract = function(keyStore, address, callback){
      Web3.createIdentityClient(keyStore, address).kill({gas: 3000000, gasPrice: GASPRICE}, callback);
    };

    /**
    * This maps to the contract on ehtereum, typically wrapped behind the identity asser which does more encryption.
    */
    self.assert = function(keyStore, address, assertionType, assertionKey, assertionValue){
      $log.info('Storing assertionType:"'+assertionType+'"" with key "'+assertionKey+'"" and value "'+assertionValue+'"" to contract at : '+address);
      Web3.createIdentityClient(keyStore, address).assert( assertionType, assertionKey, assertionValue, {gas: 3000000, gasPrice: GASPRICE}, function(e,res){
        if (e) { $log.info(e); }
        if (res) { $log.info(res); }
      });
    };

    self.get = function(keyStore, address, assertionType){
      $log.info('Querying '+assertionType+' on contract at '+address);
      return self.createIdentityClient(keyStore, address).get.call(assertionType);
    };

    $log.info(this);
  });
